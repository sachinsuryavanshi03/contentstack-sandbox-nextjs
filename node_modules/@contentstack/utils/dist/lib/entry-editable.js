export function addTags(entry, contentTypeUid, tagsAsObject, locale) {
    if (locale === void 0) { locale = 'en-us'; }
    if (entry)
        entry.$ = getTag(entry, "".concat(contentTypeUid, ".").concat(entry.uid, ".").concat(locale), tagsAsObject, locale);
}
function getTag(content, prefix, tagsAsObject, locale) {
    var tags = {};
    Object.entries(content).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        switch (typeof value) {
            case "object":
                if (Array.isArray(value)) {
                    value.forEach(function (obj, index) {
                        if (typeof obj !== 'undefined' && obj !== null && obj._content_type_uid !== undefined && obj.uid !== undefined) {
                            value[index].$ = getTag(obj, "".concat(obj._content_type_uid, ".").concat(obj.uid, ".").concat(obj.locale || locale), tagsAsObject, locale);
                        }
                        else {
                            if (typeof obj === "object") {
                                obj.$ = getTag(obj, "".concat(prefix, ".").concat(key, ".").concat(index), tagsAsObject, locale);
                            }
                            else {
                                tags[key] = getTagsValue("".concat(prefix, ".").concat(key), tagsAsObject);
                            }
                        }
                    });
                }
                else {
                    if (value) {
                        value.$ = getTag(value, "".concat(prefix, ".").concat(key), tagsAsObject, locale);
                    }
                }
                break;
            default:
                tags[key] = getTagsValue("".concat(prefix, ".").concat(key), tagsAsObject);
        }
    });
    return tags;
}
function getTagsValue(dataValue, tagsAsObject) {
    if (tagsAsObject) {
        return { "data-cslp": dataValue };
    }
    else {
        return "data-cslp=".concat(dataValue);
    }
}
//# sourceMappingURL=entry-editable.js.map